
import numpy as np

np.random.seed(3)

#region INITIALIZATION TESTS
from initialization import initialize_parameters_random
#parameters = initialize_parameters_random([5,4,3])
#print("W1 = " + str(parameters["W1"]))
#print("b1 = " + str(parameters["b1"]))
#print("W2 = " + str(parameters["W2"]))
#print("b2 = " + str(parameters["b2"]))

"""
Should be:

W1 = [[ 0.01788628  0.0043651   0.00096497 -0.01863493 -0.00277388]
[-0.00354759 -0.00082741 -0.00627001 -0.00043818 -0.00477218]
[-0.01313865  0.00884622  0.00881318  0.01709573  0.00050034]
[-0.00404677 -0.0054536  -0.01546477  0.00982367 -0.01101068]]
b1 = [[ 0.]
[ 0.]
[ 0.]
[ 0.]]
W2 = [[-0.01185047 -0.0020565   0.01486148  0.00236716]
[-0.01023785 -0.00712993  0.00625245 -0.00160513]
[-0.00768836 -0.00230031  0.00745056  0.01976111]]
b2 = [[ 0.]
[ 0.]
[ 0.]]
"""
#endregion

#region FORWARD PROP TESTS

#X = np.array([np.array([-0.31178367,  0.72900392,  0.21782079, -0.8990918 ]), np.array([-2.48678065,  0.91325152,  1.12706373, -1.51409323]), np.array([ 1.63929108, -0.4298936 ,  2.63128056,  0.60182225]), np.array([-0.33588161,  1.23773784,  0.11112817,  0.12915125]), np.array([ 0.07612761, -0.15512816,  0.63422534,  0.810655  ])])
parameters = {'W1': np.array([[ 0.35480861,  1.81259031, -1.3564758 , -0.46363197,  0.82465384],
       [-1.17643148,  1.56448966,  0.71270509, -0.1810066 ,  0.53419953],
       [-0.58661296, -1.48185327,  0.85724762,  0.94309899,  0.11444143],
       [-0.02195668, -2.12714455, -0.83440747, -0.46550831,  0.23371059]]), 'b1': np.array([[ 1.38503523],
       [-0.51962709],
       [-0.78015214],
       [ 0.95560959]]), 'W2': np.array([[-0.12673638, -1.36861282,  1.21848065, -0.85750144],
       [-0.56147088, -1.0335199 ,  0.35877096,  1.07368134],
       [-0.37550472,  0.39636757, -0.47144628,  2.33660781]]), 'b2': np.array([[ 1.50278553],
       [-0.59545972],
       [ 0.52834106]]), 'W3': np.array([[ 0.9398248 ,  0.42628539, -0.75815703]]), 'b3': np.array([[-0.16236698]])}

#from forwardProp import L_model_forward
#AL, caches = L_model_forward(X, parameters)
#print("AL = " + str(AL))
#print("Length of caches list = " + str(len(caches)))

"""
Should be:
AL = [[ 0.03921668  0.70498921  0.19734387  0.04728177]]
Length of caches list = 3
"""
#endregion

#region COST
Y = np.array([[1, 1, 0]])
AL = np.array([[ 0.8,  0.9,  0.4]])
#from cost import compute_cost
#print(compute_cost(AL, Y)) # SHOULD BE: 0.2797765635793423
#endregion

#region BACKPROP TESTS

AL = np.array([[ 1.78862847, 0.43650985]])
Y = np.array([[1, 0]])
caches = (np.array([[ 0.09649747, -1.8634927 ],
       [-0.2773882 , -0.35475898],
       [-0.08274148, -0.62700068],
       [-0.04381817, -0.47721803]]),
       
       np.array([[-1.31386475,  0.88462238,  0.88131804,  1.70957306],
       [ 0.05003364, -0.40467741, -0.54535995, -1.54647732],
       [ 0.98236743, -1.10106763, -1.18504653, -0.2056499 ]]),
       
       np.array([[-0.7129932 ,  0.62524497],
       [-0.16051336, -0.76883635],
       [-0.23003072,  0.74505627]])), (np.array([[ 1.97611078, -1.24412333],
       [-0.62641691, -0.80376609],
       [-2.41908317, -0.92379202]]),
       
       np.array([[-1.02387576,  1.12397796, -0.13191423]]),
       
       np.array([[ 0.64667545, -0.35627076]]))
    
#from backProp import L_model_backprop
#grads = L_model_backprop(AL, Y, caches)
#from pprint import pprint
#pprint(grads['dW1'])
#pprint(grads['db1'])
#pprint(grads['dA1'])
"""
Should be:
array([[0.41010002, 0.07807203, 0.13798444, 0.10502167],
       [0.        , 0.        , 0.        , 0.        ],
       [0.05283652, 0.01005865, 0.01777766, 0.0135308 ]])
array([[-0.22007063],
       [ 0.        ],
       [-0.02835349]])
array([[ 0.12913162, -0.44014127],
       [-0.14175655,  0.48317296],
       [ 0.01663708, -0.05670697]])
"""
#endregion

#region GRADIENT CHECKING
"""
from gradCheck import gradient_check
from forwardProp import L_model_forward

X = np.array([np.array([ 1.62434536, -0.61175641, -0.52817175]),
       np.array([-1.07296862,  0.86540763, -2.3015387 ]),
       np.array([ 1.74481176, -0.7612069 ,  0.3190391 ]),
       np.array([-0.24937038,  1.46210794, -2.06014071])])
Y = np.array([1, 1, 0]).reshape(1,3)

parameters = {'W1':np.array([[-0.3224172 , -0.38405435,  1.13376944, -1.09989127],
       [-0.17242821, -0.87785842,  0.04221375,  0.58281521],
       [-1.10061918,  1.14472371,  0.90159072,  0.50249434],
       [ 0.90085595, -0.68372786, -0.12289023, -0.93576943],
       [-0.26788808,  0.53035547, -0.69166075, -0.39675353]]), 
       'b1':np.array([[-0.6871727 ],
       [-0.84520564],
       [-0.67124613],
       [-0.0126646 ],
       [-1.11731035]]), 
       'W2':np.array([[ 0.2344157 ,  1.65980218,  0.74204416, -0.19183555, -0.88762896],
       [-0.74715829,  1.6924546 ,  0.05080775, -0.63699565,  0.19091548],
       [ 2.10025514,  0.12015895,  0.61720311,  0.30017032, -0.35224985]]), 
       'b2':np.array([[-1.1425182 ],
       [-0.34934272],
       [-0.20889423]]), 
       'W3':np.array([[ 0.58662319,  0.83898341,  0.93110208]]), 
       'b3':np.array([[ 0.28558733]])}

AL, caches = L_model_forward(X, parameters)

grads = L_model_backprop(AL, Y, caches)

gradient_check(parameters, grads, X, Y)"""

#endregion
